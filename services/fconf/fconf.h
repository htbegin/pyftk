/**
 * Generated by fbus codegen(2010-08-01)
 */

#ifndef FCONF_H
#define FCONF_H

#include "fbus_typedef.h"

FTK_BEGIN_DECLS

struct _FConf;
typedef struct _FConf FConf;

typedef Ret (*FConfLock)(FConf* thiz);
typedef Ret (*FConfUnlock)(FConf* thiz);
typedef Ret (*FConfRemove)(FConf* thiz, const char* xpath);
typedef Ret (*FConfSet)(FConf* thiz, const char* xpath, const char* value);
typedef Ret (*FConfGet)(FConf* thiz, const char* xpath, char** value);
typedef Ret (*FConfGetChildCount)(FConf* thiz, const char* xpath, int* count);
typedef Ret (*FConfGetChild)(FConf* thiz, const char* xpath, int index, char** child);
typedef void (*FConfDestroy)(FConf* thiz);

struct _FConf
{
	FConfLock lock;
	FConfUnlock unlock;
	FConfRemove remove;
	FConfSet set;
	FConfGet get;
	FConfGetChildCount get_child_count;
	FConfGetChild get_child;
	FConfDestroy destroy;

	char priv[1];
};

static inline Ret fconf_lock(FConf* thiz)
{
	return_val_if_fail(thiz != NULL && thiz->lock != NULL, RET_FAIL);

	return thiz->lock(thiz);
}

static inline Ret fconf_unlock(FConf* thiz)
{
	return_val_if_fail(thiz != NULL && thiz->unlock != NULL, RET_FAIL);

	return thiz->unlock(thiz);
}

static inline Ret fconf_remove(FConf* thiz, const char* xpath)
{
	return_val_if_fail(thiz != NULL && thiz->remove != NULL, RET_FAIL);

	return thiz->remove(thiz, xpath);
}

static inline Ret fconf_set(FConf* thiz, const char* xpath, const char* value)
{
	return_val_if_fail(thiz != NULL && thiz->set != NULL, RET_FAIL);

	return thiz->set(thiz, xpath, value);
}

static inline Ret fconf_get(FConf* thiz, const char* xpath, char** value)
{
	return_val_if_fail(thiz != NULL && thiz->get != NULL, RET_FAIL);

	return thiz->get(thiz, xpath, value);
}

static inline Ret fconf_get_child_count(FConf* thiz, const char* xpath, int* count)
{
	return_val_if_fail(thiz != NULL && thiz->get_child_count != NULL, RET_FAIL);

	return thiz->get_child_count(thiz, xpath, count);
}

static inline Ret fconf_get_child(FConf* thiz, const char* xpath, int index, char** child)
{
	return_val_if_fail(thiz != NULL && thiz->get_child != NULL, RET_FAIL);

	return thiz->get_child(thiz, xpath, index, child);
}

static inline void fconf_destroy(FConf* thiz)
{
	if(thiz != NULL && thiz->destroy != NULL)
	{
		thiz->destroy(thiz);
	}

	return;
}

FTK_END_DECLS

#endif/*FCONF_H*/
